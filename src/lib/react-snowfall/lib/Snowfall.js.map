{"version":3,"sources":["../src/Snowfall.tsx"],"names":["Snowfall","color","defaultConfig","changeFrequency","radius","speed","wind","snowflakeCount","style","mergedStyle","canvasRef","canvasSize","animationFrame","lastUpdate","Date","now","config","snowflakes","render","framesPassed","canvas","current","forEach","snowflake","update","ctx","getContext","clearRect","offsetWidth","offsetHeight","draw","loop","msPassed","targetFrameTime","requestAnimationFrame","cancelAnimationFrame","height","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { targetFrameTime } from './config'\r\nimport { useComponentSize, useSnowfallStyle, useSnowflakes, useDeepMemo } from './hooks'\r\nimport { SnowflakeProps, defaultConfig } from './Snowflake'\r\n\r\nexport interface SnowfallProps extends Partial<SnowflakeProps> {\r\n  /**\r\n   * The number of snowflakes to be rendered.\r\n   *\r\n   * The default value is 150.\r\n   */\r\n  snowflakeCount?: number\r\n  /**\r\n   * Any style properties that will be passed to the canvas element.\r\n   */\r\n  style?: React.CSSProperties\r\n}\r\n\r\nconst Snowfall = ({\r\n  color = defaultConfig.color,\r\n  changeFrequency = defaultConfig.changeFrequency,\r\n  radius = defaultConfig.radius,\r\n  speed = defaultConfig.speed,\r\n  wind = defaultConfig.wind,\r\n  snowflakeCount = 150,\r\n  style,\r\n}: SnowfallProps = {}): JSX.Element => {\r\n  const mergedStyle = useSnowfallStyle(style)\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const canvasSize = useComponentSize(canvasRef)\r\n  const animationFrame = useRef(0)\r\n\r\n  const lastUpdate = useRef(Date.now())\r\n  const config = useDeepMemo<SnowflakeProps>({ color, changeFrequency, radius, speed, wind })\r\n  const snowflakes = useSnowflakes(canvasRef, snowflakeCount, config)\r\n\r\n  const render = useCallback(\r\n    (framesPassed = 1) => {\r\n      const canvas = canvasRef.current\r\n      if (canvas) {\r\n        // Update the positions of the snowflakes\r\n        snowflakes.forEach((snowflake) => snowflake.update(canvas, framesPassed))\r\n\r\n        // Render them if the canvas is available\r\n        const ctx = canvas.getContext('2d')\r\n        if (ctx) {\r\n          ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)\r\n\r\n          snowflakes.forEach((snowflake) => snowflake.draw(ctx))\r\n        }\r\n      }\r\n    },\r\n    [snowflakes],\r\n  )\r\n\r\n  const loop = useCallback(() => {\r\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\r\n    const now = Date.now()\r\n    const msPassed = Date.now() - lastUpdate.current\r\n    lastUpdate.current = now\r\n\r\n    // Frames that would have passed if running at 60 fps\r\n    const framesPassed = msPassed / targetFrameTime\r\n\r\n    render(framesPassed)\r\n\r\n    animationFrame.current = requestAnimationFrame(loop)\r\n  }, [render])\r\n\r\n  useEffect(() => {\r\n    loop()\r\n    return () => cancelAnimationFrame(animationFrame.current)\r\n  }, [loop])\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      height={canvasSize.height}\r\n      width={canvasSize.width}\r\n      style={mergedStyle}\r\n      data-testid=\"SnowfallCanvas\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default Snowfall\r\n"],"file":"Snowfall.js"}