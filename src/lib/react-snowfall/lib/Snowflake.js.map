{"version":3,"sources":["../src/Snowflake.ts"],"names":["defaultConfig","color","radius","speed","wind","changeFrequency","Snowflake","canvas","config","updateConfig","params","x","offsetWidth","y","offsetHeight","random","nextSpeed","nextWind","framesSinceLastUpdate","framesPassed","updateTargetParams","ctx","beginPath","arc","Math","PI","fillStyle","closePath","fill"],"mappings":"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","sourcesContent":["import { lerp, random } from './utils'\r\n\r\nexport interface SnowflakeProps {\r\n  /** The color of the snowflake, can be any valid CSS color. */\r\n  color: string\r\n  /**\r\n   * The minimum and maximum radius of the snowflake, will be\r\n   * randomly selected within this range.\r\n   *\r\n   * The default value is `[0.5, 3.0]`.\r\n   */\r\n  radius: [number, number]\r\n  /**\r\n   * The minimum and maximum speed of the snowflake.\r\n   *\r\n   * The speed determines how quickly the snowflake moves\r\n   * along the y axis (vertical speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[1.0, 3.0]`.\r\n   */\r\n  speed: [number, number]\r\n  /**\r\n   * The minimum and maximum wind of the snowflake.\r\n   *\r\n   * The wind determines how quickly the snowflake moves\r\n   * along the x axis (horizontal speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-0.5, 2.0]`.\r\n   */\r\n  wind: [number, number]\r\n  /**\r\n   * The frequency in frames that the wind and speed values\r\n   * will update.\r\n   *\r\n   * The default value is 200.\r\n   */\r\n  changeFrequency: number\r\n}\r\n\r\nexport type SnowflakeConfig = Partial<SnowflakeProps>\r\n\r\nexport const defaultConfig: SnowflakeProps = {\r\n  color: '#dee4fd',\r\n  radius: [0.5, 3.0],\r\n  speed: [1.0, 3.0],\r\n  wind: [-0.5, 2.0],\r\n  changeFrequency: 200,\r\n}\r\n\r\ninterface SnowflakeParams {\r\n  x: number\r\n  y: number\r\n  radius: number\r\n  speed: number\r\n  wind: number\r\n  nextSpeed: number\r\n  nextWind: number\r\n}\r\n\r\n/**\r\n * An individual snowflake that will update it's location every call to `update`\r\n * and draw itself to the canvas every call to `draw`.\r\n */\r\nclass Snowflake {\r\n  private config!: SnowflakeProps\r\n  private params: SnowflakeParams\r\n  private framesSinceLastUpdate: number\r\n\r\n  public constructor(canvas: HTMLCanvasElement, config: SnowflakeConfig = {}) {\r\n    // Set custom config\r\n    this.updateConfig(config)\r\n\r\n    // Setting initial parameters\r\n    const { radius, wind, speed } = this.config\r\n\r\n    this.params = {\r\n      x: random(0, canvas.offsetWidth),\r\n      y: random(-canvas.offsetHeight, 0),\r\n      radius: random(...radius),\r\n      speed: random(...speed),\r\n      wind: random(...wind),\r\n      nextSpeed: random(...wind),\r\n      nextWind: random(...speed),\r\n    }\r\n\r\n    this.framesSinceLastUpdate = 0\r\n  }\r\n\r\n  public updateConfig(config: SnowflakeConfig): void {\r\n    this.config = { ...defaultConfig, ...config }\r\n  }\r\n\r\n  private updateTargetParams(): void {\r\n    this.params.nextSpeed = random(...this.config.speed)\r\n    this.params.nextWind = random(...this.config.wind)\r\n  }\r\n\r\n  public update(canvas: HTMLCanvasElement, framesPassed = 1): void {\r\n    const { x, y, wind, speed, nextWind, nextSpeed } = this.params\r\n\r\n    // Update current location, wrapping around if going off the canvas\r\n    this.params.x = (x + wind * framesPassed) % canvas.offsetWidth\r\n    this.params.y = (y + speed * framesPassed) % canvas.offsetHeight\r\n\r\n    // Update the wind and speed towards the desired values\r\n    this.params.speed = lerp(speed, nextSpeed, 0.01)\r\n    this.params.wind = lerp(wind, nextWind, 0.01)\r\n\r\n    if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {\r\n      this.updateTargetParams()\r\n      this.framesSinceLastUpdate = 0\r\n    }\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D): void {\r\n    ctx.beginPath()\r\n    ctx.arc(this.params.x, this.params.y, this.params.radius, 0, 2 * Math.PI)\r\n    ctx.fillStyle = this.config.color\r\n    ctx.closePath()\r\n    ctx.fill()\r\n  }\r\n}\r\n\r\nexport default Snowflake\r\n"],"file":"Snowflake.js"}